package com.javarush.task.task17.task1710;

import java.text.DateFormat;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/* 
CRUD
*/

public class Solution {
        
    public static List<Person> allPeople = new ArrayList<Person>();

    static {
        allPeople.add(Person.createMale("Иванов Иван", new Date()));  //сегодня родился    id=0
        allPeople.add(Person.createMale("Петров Петр", new Date()));  //сегодня родился    id=1
        System.out.println("Static завершил работу.");
    }

    public static void main(String[] args) {
        if (args[0].equals("-c"))
            createNewPerson(args[1],args[2],args[3]);
        else if (args[0].equals("-u"))
            updatePerson(args[1], args[2], args[3], args[4]);
        else if (args[0].equals("-d")) {
            deletePerson(args[1]);
            }
        else if (args[0].equals("-i"))
            infoPerson(args[1]);
        else 
            System.out.println("Unknown command. Set -c / -u / -d / -i command.");
    }
    
    private static void createNewPerson(String name, String sex, String bd) {
        Person person = null;
        String personName = name;
        Sex personSex = choseSex(sex);
        Date personBdate = chooseBday(bd);

        if (personSex.equals(Sex.MALE)) {
            person = Person.createMale(personName, personBdate);
        } else if (personSex.equals(Sex.FEMALE)) {
            person = Person.createFemale(personName, personBdate);
        }
        allPeople.add(person);
        System.out.println(allPeople.indexOf(person));   //вывод id добавленного Person
    }


    private static  void updatePerson(String id, String name, String sex, String bd) {
        Person person = allPeople.get(Integer.parseInt(id));
        person.setName(name);
        person.setSex(choseSex(sex));
        person.setBirthDate(chooseBday(bd));
    }

    private static void deletePerson(String id) {
        try {
            int x = Integer.parseInt(id);
            Person person = allPeople.get(x);
            person.setName(null);
            person.setSex(null);
            person.setBirthDate(null);
        } catch (NullPointerException e){/*NOP*/}
    }

    private static void infoPerson(String id) {
        int x = Integer.parseInt(id);
        Person person = allPeople.get(x);
        String sex;
        if (person.getSex().equals(Sex.MALE)) sex = "м";
        else if (person.getSex().equals(Sex.FEMALE)) sex = "ж";
        else sex = null;

        SimpleDateFormat sm = new SimpleDateFormat("dd-MMM-yyyy");
        String bDay = sm.format(person.getBirthDate());

        String message = person.getName() + " " + sex + " " + bDay;
        System.out.println(message);
    }

    //преводит строку с ДР в формат даты
    public static Date chooseBday(String s) {
        Date personBday = null;
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
        try {
            personBday = format.parse(s);
        } catch (ParseException e) {
            //System.out.println("Указан неправильный формат даты рождения");
            e.printStackTrace();
        }
        return personBday;
    }

    //определяет пол - м/ж
    public static Sex choseSex(String s) {
        Sex personSex = null;
        try {
            if (s.equals("м")) personSex = Sex.MALE;
            else if (s.equals("ж")) personSex = Sex.FEMALE;
            else System.out.println("Sex:NULL");
        } catch (UnknownFormatFlagsException e){
            //System.out.println("Пол указан в неправильном формате");
            e.printStackTrace();
        }
        return personSex;
    }
}

public class Person {
    private String name;
    private Sex sex;
    private Date birthDate;

    private Person(String name, Sex sex, Date birthDate) {  //приватный!! конструктор - для методов ниже
        this.name = name;
        this.sex = sex;
        this.birthDate = birthDate;
    }

    public static Person createMale(String name, Date birthDate) {    //метод - возвращает мужчину
        return new Person(name, Sex.MALE, birthDate);
    }

    public static Person createFemale(String name, Date birthDate) {   //метод - возвращает женщину
        return new Person(name, Sex.FEMALE, birthDate);
    }

    //геттеры/сеттеры переменных объекта класса
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Sex getSex() {
        return sex;
    }

    public void setSex(Sex sex) {
        this.sex = sex;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    @Override
    public String toString() {
        return name + " " + sex + " " + birthDate;
    }
}

public enum Sex {
    MALE,
    FEMALE
}
